{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Corvassembly",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#types"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#opcodes"
		},
		{
			"include": "#registers"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#directives"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.cor",
					"match": "\\b(if|for|break|continue|breakall|import|as|elif|else|is|isnt)\\b"
				},
				{
					"match": "\\b(carry|zero|negative|equal|greater|less)(?!\\w+)",
					"name": "support.variable.cor"
				},
				{
					"match": "(?<=,) *(ram|rom|gpu)",
					"name": "support.variable.cor"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.cor",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cor",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.cor"
				},
				{
					"begin": "//",
					"end": "$\\n?",
					"name": "comment.line.double-slash.cor"
				}
			]
			
		},
		"types": {
			"patterns": [
				{
					"match": "(?<!\\w)\\b(pre|ram|rom|gpu)\\b",
    				"name": "storage.type.cor"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b((UART|UART_STATUS|RX_EMPTY|TX_EMPTY|RX_FULL|TX_FULL|TIMER0_COMP|TIMER0_PRES|TIMER0_EN|TIMERS|DISPLAY|R[4AB]0[0-9A-F][0-9A-F]))(?![A-z_0-9\\.])",
					"name": "constant.language.cor"
				},
				{
					"match": "\\b((TIMER)|(FRAME))(?![A-z_0-9\\.])",
					"name": "support.constant.cor"
				},
				{
					"match": "\"((\\\\.)|[^\\\\])\"",
					"name": "constant.character.escape.cor"
				},
				{
					"match": "(?<!&)\\b([1-9][0-9]*|0)(?!\\w+)",
					"name": "constant.numeric.cor"
				},
				{
					"match": "(?<!&)(0x)([0-9A-Fa-f]+)(?![G-Zg-z]+)",
					"captures": {
						"1": {"name": "entity.name.type.class.cor"},
					  	"0": {"name": "constant.numeric.cor"}
					}
					  
				},
				{
					"match": "(?<!&)(0b)([0-1_]+)(?![2-9]|\\w+)",
					"captures": {
						"1": {"name": "entity.name.type.class.cor"},
					  	"0": {"name": "constant.numeric.cor"}
					}
				},
				{
					"match": "\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "string.unquoted.cor"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(==)|(>=)|(<=)|[+\\-/\\*<>\\&\\|\\^~]",
    				"name": "keyword.operator.cor"
				}
			]
		},
		"opcodes": {
			"patterns": [
				{
					"match": "(?<!\\w  |\\w)\\b((LDR|ldr|STR|str|LPT|lpt|SPT|spt|CMP|cmp|ADD|add|SUB|sub|MUL|mul|DIV|div|MOD|mod|AND|and|OR|or|XOR|xor|NOT|not|LSL|lsl|LSR|lsr|PSH|psh|POP|pop|PEK|pek|JMP|jmp|JSR|jsr|JOC|joc|JSC|jsc|RSC|rsc|rti|RTI|ric|RIC)(?= +))",
    				"name": "entity.name.function.cor"
				},
				{
					"match": "(?<!\\w  |\\w)\\b((NOP|nop|RTS|rts)(?!( *\\w+)))",
					"name": "support.function.cor"
				}
			]
		},
		"registers": {
			"patterns": [
				{
					"match": "\\b([a-h])(?![A-z_0-9\\.])",
					"name": "support.variable.cor"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(?<!\\w  |\\w)\\b(([A-z]|_)\\w*)(?=:|(\\([A-Za-z_][A-Za-z_0-9]*\\)))",
					"name": "entity.name.tag"
				},
				{
					"match": "(?<!\\w|\\$)\\b(([A-z]|_)\\w*)(?!:)",
					"name": "variable.parameter.cor"
				}
			]
		},
		"directives": {
			"patterns": [
				{
					"match": "#.*? ",
					"name": "keyword.control.cor"
				}
			]
		}
	},
	"scopeName": "source.cor"
}